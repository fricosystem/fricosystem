Claude, preciso de um sistema de lançamento manual de notas fiscais com linguagem de exemplo em anexo utilizando o Firebase como banco de dados. O sistema deve ter:

Autenticação

Página de login utilizando o Firebase Authentication
Integração com o AuthContext fornecido
Coleção "usuarios" no Firestore com campos: nome, email, senha

Funcionalidades principais

Página de lançamento de NFe contendo:

Campo para chave da NFe
Campos para dados do fornecedor
Campos para data de emissão e valor total
Seção para cadastro dos produtos da nota
Botão para finalizar lançamento


Página de visualização de NFes lançadas:

Tabela com todas as notas fiscais
Filtros por data, fornecedor e valor
Opção para visualizar detalhes de cada nota
Possibilidade de editar ou excluir notas


Página de listagem de produtos:

Tabela com produtos da coleção "produtos"
Campos conforme documentação: codigo_estoque, codigo_material, data_criacao, data_vencimento, deposito, fornecedor_atual, imagem, nome, prateleira, quantidade, quantidade_minima, unidade, unidade_de_medida, valor_unitario
Se o produto existir, apenas atualizar quantidade
Sempre atualizar fornecedor_atual se não existir/for nulo ou se for o mesmo



Regras de negócio

Ao lançar uma NFe, produtos devem ser atualizados no estoque
Se produto já existe, somar quantidade
Se não existe, criar novo registro
Validação de dados em todos os formulários
Permissões baseadas no usuário logado

Design

Interface limpa e responsiva
Tema claro/escuro conforme preferência do usuário
Tabelas com paginação e ordenação
Modal de confirmação para ações importantes

Use a configuração do Firebase fornecida e o AuthContext existente. A aplicação deve seguir boas práticas de desenvolvimento React e garantir segurança nos dados.

AuthContext:

import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import { 
  getAuth, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  onAuthStateChanged, 
  signOut,
  updateProfile,
  User 
} from 'firebase/auth';
import { 
  getFirestore, 
  doc, 
  setDoc, 
  updateDoc, 
  serverTimestamp, 
  getDoc,
  Timestamp 
} from 'firebase/firestore';

// Defina o tipo para os dados do usuário
interface UserData {
  nome: string;
  email: string;
  cpf: string;
  cargo: string;
  tema: string;
  data_registro: Timestamp;
  ultimo_login: Timestamp;
  imagem_perfil: string;
  ativo: string;
  centro_de_custo: string;
}

// Defina a interface para o contexto
interface AuthContextType {
  user: User | null;
  userData: UserData | null;
  signIn: (email: string, password: string) => Promise<User>;
  signUp: (email: string, password: string, displayName: string, cpf: string, cargo: string, imagemPerfil?: string, centroDeCusto?: string) => Promise<User>;
  logout: () => Promise<void>;
}

// Crie o contexto com um valor padrão
const AuthContext = createContext<AuthContextType>({
  user: null,
  userData: null,
  signIn: async () => { throw new Error('Function not implemented'); },
  signUp: async () => { throw new Error('Function not implemented'); },
  logout: async () => { throw new Error('Function not implemented'); }
});

interface AuthProviderProps {
  children: ReactNode;
}

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);
  
  const auth = getAuth();
  const db = getFirestore();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setUser(currentUser);
      
      if (currentUser) {
        // Buscar dados adicionais do usuário no Firestore
        try {
          const userDocRef = doc(db, "usuarios", currentUser.uid);
          const userDoc = await getDoc(userDocRef);
          
          if (userDoc.exists()) {
            setUserData(userDoc.data() as UserData);
          }
        } catch (error) {
          console.error("Erro ao buscar dados do usuário:", error);
        }
      } else {
        setUserData(null);
      }
      
      setLoading(false);
    });

    return unsubscribe;
  }, [auth, db]);

  // Função para criar um novo usuário
  async function signUp(email: string, password: string, displayName: string, cpf: string, cargo: string, imagemPerfil: string = "", centroDeCusto: string = ""): Promise<User> {
    try {
      // Criar usuário no Firebase Authentication
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      
      // Atualizar o nome de exibição no Auth
      await updateProfile(userCredential.user, {
        displayName: displayName
      });
      
      // Criar documento do usuário no Firestore
      const userDocRef = doc(db, "usuarios", userCredential.user.uid);
      
      await setDoc(userDocRef, {
        nome: displayName,
        email: email,
        cpf: cpf,
        cargo: cargo,
        tema: "dark",
        data_registro: serverTimestamp(),
        ultimo_login: serverTimestamp(),
        imagem_perfil: imagemPerfil,
        ativo: "sim",
        centro_de_custo: centroDeCusto
      });
      
      return userCredential.user;
    } catch (error) {
      throw error;
    }
  }

  // Função para login
  async function signIn(email: string, password: string): Promise<User> {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      
      // Atualizar o último login no Firestore
      const userDocRef = doc(db, "usuarios", userCredential.user.uid);
      await updateDoc(userDocRef, {
        ultimo_login: serverTimestamp()
      });
      
      return userCredential.user;
    } catch (error) {
      throw error;
    }
  }

  // Função para logout
  async function logout(): Promise<void> {
    return signOut(auth);
  }

  const value: AuthContextType = {
    user,
    userData,
    signIn,
    signUp,
    logout
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}

firebase.ts:

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "AIzaSyBQNeSL_KyO2JjomiZLph5OaqtnhH8ahTk",
  authDomain: "fricoalimentossystem-60cf5.firebaseapp.com",
  projectId: "fricoalimentossystem-60cf5",
  storageBucket: "fricoalimentossystem-60cf5.firebasestorage.app",
  messagingSenderId: "6036191545",
  appId: "1:6036191545:web:ec7236737432ea9165d0e8",
  measurementId: "G-D4YSPJX34M"
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);